<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!-- This module was also published with a richer model, Gradle metadata,  -->
  <!-- which should be used instead. Do not delete the following line which  -->
  <!-- is to indicate to Gradle or any Gradle module metadata file consumer  -->
  <!-- that they should prefer consuming it instead. -->
  <!-- do_not_remove: published-with-gradle-metadata -->
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.pixelduke</groupId>
    <artifactId>parent-fxthemes</artifactId>
    <version>1.2.0</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>fxthemes-samples</artifactId>
  <version>1.2.0</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <os-classifier>win</os-classifier>
    <forceUploadingPainter>true</forceUploadingPainter>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-base</artifactId>
      <version>20.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-graphics</artifactId>
      <version>20.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>20.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>20.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-media</artifactId>
      <version>20.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-swing</artifactId>
      <version>20.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-web</artifactId>
      <version>20.0.2</version>
    </dependency>
    <dependency>
      <groupId>com.pixelduke</groupId>
      <artifactId>fxthemes</artifactId>
      <version>1.2.0</version>
    </dependency>
    <dependency>
      <groupId>com.pixelduke</groupId>
      <artifactId>transit</artifactId>
      <version>1.0.0</version>
    </dependency>
  </dependencies>

  <profiles>
    <!-- MacOS X compiling step -->
    <profile>
      <id>mac</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <xcodeScheme>Debug</xcodeScheme>
        <my.property>running.on.mac</my.property>
        <forceUploadingPainter>false</forceUploadingPainter>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-maven-plugin</artifactId>
            <version>0.0.8</version>
            <executions>
              <execution>
                <!-- Default configuration for running with: mvn clean javafx:run -->
                <id>default-cli</id>
                <configuration>
                  <mainClass>com.pixelduke.samples.window.DarkThemeSampleMac</mainClass>
                  <launcher>app</launcher>
                  <jlinkZipName>app</jlinkZipName>
                  <jlinkImageName>app</jlinkImageName>
                  <noManPages>true</noManPages>
                  <stripDebug>true</stripDebug>
                  <noHeaderFiles>true</noHeaderFiles>
                  <options>
                    <!-- For getting the native window handle (WindowUtils.getNativeHandleForStage method) -->
                    <option>--add-opens</option>
                    <option>javafx.graphics/javafx.stage=com.pixelduke.fxthemes</option>
                    <option>--add-exports</option>
                    <option>javafx.graphics/com.sun.javafx.tk.quantum=com.pixelduke.fxthemes</option>
                  </options>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <source>17</source>
          <target>17</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <executions>
          <execution>
            <!-- Default configuration for running with: mvn clean javafx:run -->
            <id>default-cli</id>
            <configuration>
              <mainClass>com.pixelduke.samples.window.DarkThemeSample</mainClass>
              <launcher>app</launcher>
              <jlinkZipName>app</jlinkZipName>
              <jlinkImageName>app</jlinkImageName>
              <noManPages>true</noManPages>
              <stripDebug>true</stripDebug>
              <noHeaderFiles>true</noHeaderFiles>
              <options>
                <!-- So that changing the background of a native Window works well (at least on some machines using win11) -->
                <option>-Dprism.forceUploadingPainter=${forceUploadingPainter}</option>
                <!-- For getting the native window handle (WindowUtils.getNativeHandleForStage method) -->
                <option>--add-opens</option>
                <option>javafx.graphics/javafx.stage=com.pixelduke.fxthemes</option>
                <option>--add-exports</option>
                <option>javafx.graphics/com.sun.javafx.tk.quantum=com.pixelduke.fxthemes</option>
                <option>--add-exports</option>
                <option>javafx.graphics/com.sun.glass.ui=com.pixelduke.fxthemes</option>
              </options>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
